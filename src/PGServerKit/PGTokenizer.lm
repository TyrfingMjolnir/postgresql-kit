
HASH    [#]
ID	    [A-Za-z_][A-Za-z0-9_]*
EQUALS	[=]
WHITESP [\t ]+
NEWLINE \r?\n

%{
#import <Foundation/Foundation.h>
#import "PGTokenizer.h"
%}

%option reentrant
%option noyywrap

%%
\'(\\.|[^\\'])*\'  { return PGTokenizerSQString; }
\"(\\.|[^\\"])*\"  { return PGTokenizerDQString; }
{HASH}		{ return PGTokenizerHash; }
{EQUALS}	{ return PGTokenizerEquals; }
{ID}		{ return PGTokenizerKeyword; }
{WHITESP}	{ return PGTokenizerWhitespace; }
{NEWLINE}	{ return PGTokenizerNewline; }
.			{ return PGTokenizerOther; }
%%

BOOL file_tokenize(PGTokenizer* tokenizer,const char* file) {
    yyscan_t yyscanner;
    struct yyguts_t* yyg;
    yylex_init(&yyscanner);
    yyg = (struct yyguts_t* )yyscanner;
	yyin = fopen(file,"rb");
	if(yyin==nil) {
		return NO;
	}
	int type;
	while((type = yylex(yyscanner)) > 0) {
		[tokenizer token:type text:yyget_text(yyscanner)];
	}
    yylex_destroy(yyscanner);
	fclose(yyin);
	return YES;
}
